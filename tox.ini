[tox]
envlist =
    tests-py{39,310,311,312}
    linting
    coverage
    type_check
skip_missing_interpreters = True
skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:tests-py312]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    .[tests]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    python -m pytest --basetemp={envtmpdir} {posargs}

[testenv:tests-py{39,310,311}]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    .[tests]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    python -m pytest --basetemp={envtmpdir} --ignore=unittests/test_py_312.py {posargs}

[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    {[testenv:tests-py312]deps}
    .[linting]
    # add your fixtures like e.g. pytest_datafiles here
setenv = PYTHONPATH = {toxinidir}/src
commands =
    pylint src/generics
    pylint unittests --rcfile=unittests/.pylintrc
    # add single files (ending with .py) or packages here

[testenv:type_check]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/src
deps =
    {[testenv:tests-py312]deps}
    .[type_check]
commands =
    mypy --show-error-codes src/generics
    mypy --show-error-codes --enable-incomplete-feature=NewGenericSyntax unittests
    # add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
changedir = unittests
deps =
    {[testenv:tests-py312]deps}
    .[coverage]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 80 --omit .tox/*,unittests/*


[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:tests-py312]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:coverage]deps}
    .[formatting]
    pip-tools
    pre-commit
commands =
    python -m pip install --upgrade pip
    pip-compile requirements.in
    pip install -r requirements.txt
    pre-commit install

[testenv:test_packaging]
skip_install = true
deps =
    .[test_packaging]
commands =
    python -m build
    twine check dist/*
